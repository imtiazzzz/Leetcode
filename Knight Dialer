class Solution(object):
    def knightDialer(self, n):
        """
        :type n: int
        :rtype: int
        """
        MOD = 10**9 + 7

        # Possible knight moves from each numeric cell
        moves = {
            1: [6, 8],
            2: [7, 9],
            3: [4, 8],
            4: [3, 9, 0],
            5: [],
            6: [1, 7, 0],
            7: [2, 6],
            8: [1, 3],
            9: [2, 4],
            0: [4, 6]
        }

        # Initialize the dp array
        dp = [1] * 10

        for _ in range(1, n):
            new_dp = [0] * 10
            for i in range(10):
                for move in moves[i]:
                    new_dp[move] = (new_dp[move] + dp[i]) % MOD

            dp = new_dp

        return sum(dp) % MOD

# Example usage:
solution = Solution()
print(solution.knightDialer(1))  # Output: 10
print(solution.knightDialer(2))  # Output: 20
print(solution.knightDialer(3131))  # Output: 136006598
